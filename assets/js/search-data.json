{
  
    
        "post0": {
            "title": "Change Log",
            "content": "Editing The Look Of Flash Alerts . file: _sass minima fastpages-styles.scss . code: .flash { position: relative; padding: 10px 10px; border-style: solid; border-width: 4px; border-radius: 10px; } . . Editing The Look Of Inline Markdown Code . file: _sass minima colorschemes fastpages-dracula-highlight.scss . code: .highlight { // background: $dt-code-cell-background !important; color: $dt-gray-light !important; pre, code { background: $dt-code-cell-background; color: $dt-gray-light; border-left: 10px solid $dt-code-cell-background; border-left: 10px solid $dt-code-cell-background; border-top: 10px solid $dt-code-cell-background; border-bottom: 10px solid $dt-code-cell-background; border-radius: 15px !important; } . . Editing The Look Of Jupyter Code Cells . file: _sass minima syntax_highlight_base.scss . code: some code needed to be commented out due to style conflicts in other .scss files . // .input_area pre, .input_area div { // margin-bottom: 2rem !important; // margin-top: 1.5rem !important; // padding-bottom: 0 !important; // padding-top: 0 !important; // background: $dt-code-cell-background; // -webkit-font-smoothing: antialiased; // text-rendering: optimizeLegibility; // font-family: Menlo, Monaco, Consolas, &quot;Lucida Console&quot;, Roboto, Ubuntu, monospace; // border-radius: 5px; // font-size: 100%; // font-weight: 350; // make code have slightly more weight than text // } .input_area pre { border-left: 10px solid $dt-code-cell-background; border-left: 10px solid $dt-code-cell-background; border-top: 10px solid $dt-code-cell-background; border-bottom: 10px solid $dt-code-cell-background; border-radius: 10px !important; } . . Fix Scrollbars Not Showing For Overflowing Notebook Cells . file: _sass base_typography.scss . code: .re { -webkit-overflow-scrolling: touch; font-family: _font(family-fixed); font-size: 0.9rem; margin: 0 0 _size(element-margin) 0; // this fixed the issue with scrollbars overflow: auto !important; code { display: block; line-height: 1.75; padding: 1rem 1.5rem; } } . . Editing The Size Of Normal Text . file: _sass base_typography.scss . code: body, input, select, textarea { // controls the font type of the blog text (unformatted markdowns) font-family: _font(family); font-weight: _font(weight); font-size: 1rem; line-height: 2.375; } . . Fix #Collapse-Output Not Working For Notebooks . file: _action_files hide.tpl . code: replace the pertinent block . {% block output_group -%} {%- if cell.metadata.collapse_output -%} &lt;details class=&quot;description&quot;&gt; &lt;summary class=&quot;btn btn-sm&quot; data-open=&quot;Hide Output&quot; data-close=&quot;Show Output&quot;&gt;&lt;/summary&gt; &lt;p&gt;{{ super() }}&lt;/p&gt; &lt;/details&gt; &lt;br/&gt; &lt;br/&gt; {%- elif cell.metadata.hide_output -%} {%- else -%} {{ super() }} {%- endif -%} {% endblock output_group %} . . Editing The Look Of Images . file: _sass minima fastpages-styles.scss . code: .post img { display: block; vertical-align: top; margin-left: auto; border: groove; margin-right: auto; } . . Fix Posts Not Hiding . files: index.html; _layouts blog.html; _layouts categories.html; _layouts tags.html . add hide: true to the front matter of the post; you could also set search_exclude = true but that means the only way the hidden post can be accessed is through its permalink (for example, setting permalink: /hidden/:title/) . code: {% for post in ***** %} {% if post.hide != true %} ***** {% endif %} {% endfor %} . . . template . ### editing ... file: &lt;details&gt; &lt;summary markdown=&quot;span&quot;&gt;&lt;strong&gt;code:&lt;/strong&gt;&lt;/summary&gt; scss **code** &lt;/details&gt; &lt;br/&gt; &lt;br/&gt; .",
            "url": "https://outsiders17711.github.io/Mein.Platz/Change-Log/",
            "relUrl": "/Change-Log/",
            "date": " • Jun 25, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Setting Up This Blog",
            "content": "Setting Up This Blog Using fastpages . . Note: You can skip over the Background section. I went off for a while here. Jump to Introducing fastpages . . Background . Over the course of this year, as I got deeper into Machine Learning and Computer Vision, I started to come across posts and comments advising folks new to programming in general to create a blog detailing their experiences. . Most posts/people summed up the benefits of creating such a blog along the lines of: . You are presently in the best position to help along another newcomer who is a few steps behind you. This is because the issues you came across and the mistakes you made are still fresh in your mind and the resources you consulted to overcome/correct those issues/mistakes are still fresh in you mind and close to hand. | It is generally agreed that writing about a topic helps deepen your understanding of the topic and force you to address the gaps in your knowledge. | You write for totally selfish reasons. You write for posterity. You write for your future self. | . Given the schools of thought I was exposed to while learning programming and my personal way of doing things, my code is always littered with detailed and sometimes superfluous comments. Thus, I initially assumed that all I needed to do was put all my comments for a project together, edit and format them into a coherent document, and voila!, blog post. . Unfortunately, the various resources I found online for creating simple blogs were overly involved and required knowledge of html and other web-related stuff of which I knew nothing. Furthermore, I wasn&#39;t interested in going off on a tangent when my focus is Machine Learning and Computer Vision. I also came across GitHub Pages at this point but it was more of the same. . So, I gave up on creating a blog and stuck to writing detailed comments in my code. . A couple months after, I took fast.ai&#39;s Practical Deep Learning for Coders online course. At some point in Lesson 3, when Jeremy Howard started going on about writing and blogs, in my mind I went &quot;Here we go again.&quot; Then he introduced fastpages and it was all I ever needed. . Create a blog using jupyter notenooks and markdown files? Take my money!!! . . Introducing fastpages . fastpages is an easy to use blogging platform, with support for Jupyter notebooks, Word documents, and Markdown. . . fastpages uses GitHub Actions to simplify the process of creating Jekyll blog posts on GitHub Pages from a variety of input formats. . See the fastpages GitHub repository for a more detailed list of features. . Note: See the demo site. . . Initial Setup . The initial setup is totally straightforeward and effortless. The setup instructions are detailed and there is even a walkthrough on YouTube if that wasn&#39;t enough. . It wasn&#39;t enough for me. There was part of the setup where I needed to merge a pull request but I somehow didn&#39;t see that line in the instructions. . With the setup instructions and YouTube walkthrough, you can&#39;t go wrong. If you, go through either of them again, slowly. You most definitely missed something. . If at any point you come across build issues, refer to the fastpages Troubleshooting Guide. . . Customizing Your Blog . Once you&#39;re done with the intial setup, you&#39;ll get a generic blog that contains a few placeholders from fastbook. There are a few simple customizations you can make to put your personal stamp on your blog. . These customizations can be implemented across four files and one folder in the newly forked blog repository. I will list the files and the personalizations that can be done in each. . index.html . This file is responsible for the the content of the blog&#39;s homepage -- between the top bar and the Posts section. The picture below shows the code and the result in the homepage. . . Two sets of changes can be made in this file: . Line 4: The blog logo by sepecified by a file placed in the images folder of the base directory. This is the image preview automatically shown with your blog URL on social media sites. You can either: . replace the fastpages logo with one of your own choosing, leaving Line 4 as it is; or | add you own file to the images folder and edit the filename in Line 4. . Important: The image for the blog logo MUST be in the images folder (or subfolders) for your blog to render correctly. | . | Lines 6-14: Everything here can be removed and replaced with content of your choosing. From my experience, the content can be in html format or markdown format or a mix of both formats. | README.md . This file is responsible for the content of the blog&#39;s github repository page -- after the folders and files have been listed. . . Two sets of changes can be made to this file: . Line 6: You can totally remove that line, thus removing the View Demo Site badge. On the other hand, you might want to change it to one of your choosing and make it point to another link. . This is quite simple. The shields.io developer site contains example code on how to create your own custom badges. If you want to use a shield logo other than the ones available, you need to convert your .png to base64 code, you can&#39;t just specify a path to the .png file. b64.io is a free resource for converting images to base64 format. The logo is then specified in the badge code using the snippet below. . ?logo=data:image/png;base64,… . You can consult the answers provided to this stackoverflow question if you have any difficulty creating you custom badge. You can create any number of badges this way, all with different attributes. . | Lines 7-554: Everything here can be removed and replaced with content of your choosing. The content has to be in markdown format. . | _config.yml . This is the main configuration file for the blog. This file should be edited carefully as any mistakes will cause errors when GutHub tries to build your blog. The main fastpages README.md provides detailed information on what parts of the blog the parameters in this file control. . However, since we&#39;re talking about simple customizations, here are some: . Line 9: This controls the title of the blog found at the top of the homepage. It is freely customizable. | Line 10: This controls the blog description at the very bottom of the homepage. It is freely customizable. | Lines 39-43: Here you can add links you your social media accounts and other professional accounts. This link provides the list if supported social networks and their keys. | Line 52: This controls the display of image previews on the home page, for posts that have them. It is set to false by default. You should try it out, it&#39;s a good look. | images . This folder contains images necessary for customizing the look of the blog&#39;s URL. There are a couple of changes you can make here. . logo.png: As stated earlier, this specfies the image preview automatically shown with your URL on social media sites. This is freely customizable. | favicon.ico: This controls the page icon shown on the browser tab when the site is opened in browser. There are lots of free resources for downloading .ico files or converting your .png to .ico. . Important: From my experience, the file name of the page icon MUST be favicon.ico. | . pages/about.md . This file is responsible for the the content of the blog&#39;s About Me page -- found on right-side of the top bar. The picture below shows the code and the result on the blog. . . Everything from Lines 7-12 can be removed and replaced with content of your choosing. The content has to be in markdown format. . . Note: That&#8217;s about it for simple customizations&#8217; you can make your blog at first go. . . Further Customizations . Here are some other advanced customizations you can carry out. They are advanced in the sense that you need to go through the documentation of the various resources used by fastpages in order to figure out to to modify them. . At this point, you&#39;ll be diverging greatly from the default fastpages setup for your blog, thus you&#39;ll need to modify/add multiple files to successfully make a modification. . Switching To Dark Mode: . Prudhvi Rampey provides a simple guide to being the darkmode experience to fastpages. All you have to do is add one file (available here) to the /_sass/minima/ folder and add this import line in custom-styles.scss in the same folder. . /*--*/ /*-- ADD YOUR STYLES BELOW -*/ @import &quot;minima/dark-mode&quot;; . Prashanth Rao&#39;s article which talks generally about the advantages of using fastpages also contains a few tips on visual customizations in the appendix section. . Making Your Blog Appear On Google Search . Victor2Code has a post on how to make your site and pages appear on Google search result. It only takes two steps. . NOTE:Victor notes in his post that amongst the ownership verification options provided by Google, he was unable to verify using the fist option didn&#39;t woer for him.&gt; However, it worked for me in flawlessly. So, I will advise that you still try that option first (as it is by far the easiest). . Adding A Copy Button To Markdown Code Blocks . Steve provides a guide on how to achieve this. Aleksandr Hovhannisyan also has a guide which follows a slightly different implementation to acheive the same goal. . Adding Flash Alerts To Your Posts . . Flash alerts like this can be used to highlight some information. A comprehensive guide on styling flash alerts can be found here. . Dynamically Run Code Written On Jupyter Notebooks . If you have a post that contains charts or tables with data that changes over time, the default fastpages setup means you will have to manually re-run the source notebook and rebuild the site. Niegil Francis provides a guide on setting up your blog to automatically runs and updates itself so that your page is always up-to-date with the current data. . Creating Permalinks . This Jekyll documentation provides information on how to set up permalinks for you blog. However, I found that this post did a better job of explaining how Jekyll permalinks work and how to customize them to fit your blog. This is also useful. . Creating Distinctive README.md and about.md . The README.md file in your blog repository&#39;s root directory and the about.md file in the _pages folder are markdown files you can use to provide some information about your blog and yourself. The syntax for both files are the same (since they are both markdown files). . Now you can get really inventive with the styling and content of these files, as some folks have. Matias Singers has created a &#39;curated list of awesome READMEs&#39;. Abhishek Naidu went some steps further by creating a more comprehensive &#39;curated list of awesome Github Profile READMEs&#39; broken down into categories and adding references to tools, articles and YouTube tutorials. . No use reinventing the wheel. Go through both lists and look at the README&#39;s. When you see a style that appeals to you, check out the raw file and steal shamelessly from the best! . You can find markdown badges here and github readme stats here. . . Miscellaneous Issues . These are a bunch of random, mostly minor issues I came across and the resources I used to solve them: . BUILD ISSUES: I had a bunch of build issues while creating this blog post, all because of malformed front matter. It turns out the jekyll is quite unforgiving of syntax errors with respect to the front matter. Have a look at fastpages&#39;s Frequent Errors and Configure Title &amp; Summary to avoid the same pitfalls. | . INCLUDING YOUTUBE LINKS IN MARKDOWN FILES: Jupyter notebooks have an easy way to display tweetcards:&gt; twitter: https://twitter.com/Twitter/status/1398341197047939073?s=20 and YouTube videos: youtube: https://www.youtube.com/watch?v=vJiZqZRkIg8. Markdown files have a similar way to display tweetcards: _{_%_ https://twitter.com/Twitter/status/1398341197047939073?s=20 _%_}_ around the link to the tweet (Note: I added underscores because the syntax detection is quite aggressive.). However, there isn&#39;t a similar method for YouTube videos. . I poked around on stackoverflow and the answers to this question provide multiple solutions for displaying YouTube videos. . | . GITIGNORING .IPYNB_CHECKPOINTS: In order to ignore those pesky .ipynb_checkpoints/ folders everywhere in your blog repository, add the following lines to your .gitignore file: . .ipynb_checkpoints */.ipynb_checkpoints/* . and you should be good to go. Courtesy of stackoverflow. . Alternatively, you can use the python code below to delete all auto-generated temporary folders. You can place the code in a python file and run that file before pushing your code to GitHub: . import os import shutil local_repository_path = r&quot;local/repository/path&quot; def clean_blog_repo(targetFolder=local_repository_path): deleted_folders = [] for dirpath, dirnames, _ in os.walk(targetFolder): for folder in dirnames: if folder in [&quot;__pycache__&quot;, &quot;.ipynb_checkpoints&quot;]: # you can add more folders folderpath = os.path.join(dirpath, folder) deleted_folders.append(f&quot;{folder}: {folderpath}&quot;) shutil.rmtree(folderpath) if len(deleted_folders) != 0: print(&quot;The following folders were deleted: n&quot;, &quot; n&quot;.join(deleted_folders)) else: print(&quot;No folders were found!&quot;) clean_blog_repo() . | . SHOW HIDDEN FILES IN JUPYTER LAB: If you make use of JupyterLab, its file explorer hides hidden files by default and there isn&#39;t an ooption in the setting to control that behaviour. To display hidden files, courtesy of GitHub: While running the jupyter kernel in the terminal, do NOT use jupyter lab, use jupyter lab --ContentsManager.allow_hidden=True . | . FIX AUTOCOMPLETE IN JUPYTERLAB: I also had an issue where the autocomplete in JupyterLab wasn&#39;t working. It turns out that the issue is due to an outdated jedi dependency. This is easily fixed by running pip install jedi==0.17.2 in the terminal. Once again, courtesy of stackoverflow. | . MARKDOWN CHEATSHEET: A series of comprehensive Markdown cheatsheats have been compiled by some awesome folks out there. You can check them out for reference: . fefong on GitHub. | adam-p also on GitHub | Matt Cone; this being my personal best. | . | . RENDERING HTML IMAGES FROM JUPYTER NOTEBOOK: I had issues with images locally refernced images showing on the blog. I would link to an image using the usual syntax: ![](../path/to/image.png) and the image will show up as expected in jupyter notebook. However, on the blog, nothing! . I went through this thread on the fastai forum and its not just me. The best way to ensure that your images (or other data) render as expected on the blog is to remotely reference the image on GitHub. Thus: . Local Reference:![](../path/to/image.png) Remote Reference:![](https://raw.githubusercontent.com/github-profile/blog-repo/default-branch/path/to/image.png) Note that in my case, my default branch is main, yours may be master. . | . Conclusion . This is all I have for now. Hope you found the post useful. I plan to keep updating this post until I&#39;m done tweaking the looks of this blog. . I just want to add that I created two draft versions of this post:one in jupyter notebook and the other in markdown. I found the notebook version more comfortable to work with and the final output better looking than the markdown version. . . . Tip: Jump To Top . .",
            "url": "https://outsiders17711.github.io/Mein.Platz/Setting-Up-This-Blog/",
            "relUrl": "/Setting-Up-This-Blog/",
            "date": " • Jun 14, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Draft_ Setting Up This Blog Using fastpages",
            "content": ". Setting Up This Blog Using fastpages . . Background . . You can skip over this **Background** section. I went off for a while here. Over the course of this year when I got deeper into Machine Learning and Computer Vision, I started to come across posts and comments advising folks new to programming in general to create a blog detailing their journey. The benefits of creating such a blog could be summed up as: . You are presently in the best position to help along another newcomer who is a few steps behind you. This is because the issues you came across and the mistakes you made are still fresh in your mind and the resources you consulted to overcome/correct those issues/mistakes are still fresh in you mind and close to hand. | It is generally agreed that writing about a topic helps deepen your understanding of the topic and force you to address the gaps in your knowledge. | You write for totally selfish reasons. You write for posterity. You write for your future self. | . Given the schools of thought I was exposed to while learning programming and my personal way of doing things, my code is always littered with detailed and sometimes superfluous comments. Thus, initially it seemed all I needed to do was put all my comments for a project together, edit and format into a coherent document and voila! blog post. . Unfortunately, the various resources I found online for creating simple blogs were overly involved and required knowledge of html and other web-related stuff of which I knew nothing. Furthermore, I wasn’t interested in going on a tangent when my focus id Machine Learning and Computer Vision. I come across GitHub Pages at this point but it was more of the same. . So, I gave up on creating a blog and stuck to writing detailed comments in my code. . Then I took fast.ai’s Practical Deep Learning for Coders online course. At some point in Lesson 3, when Jeremy Howard started going on about writing and blogs, I went all “Here we go again.” Then he introduced {fastpages](https://github.com/fastai/fastpages) and it was all I ever needed. . Create a blog using jupyter notenooks and markdown files? Take my money!!! . . Introducing fastpages . fastpages is an easy to use blogging platform, with support for Jupyter notebooks, Word docs, and Markdown. . . fastpages uses GitHub Actions to simplify the process of creating Jekyll blog posts on GitHub Pages from a variety of input formats. . See the fastpages GitHub repository for a more detailed list of features. . . **[See the demo site.](https://fastpages.fast.ai/)** . Initial Setup . The initial setup is totally straightforeward and effortless. The setup instructions are detailed and there is even a walkthrough on YouTube if that wasn’t enough. . It wasn’t enough for me. There was part of the setup where I needed to merge a pull request but I somehow didn’t see that line in the instructions. . With the setup instructions and YouTube walkthrough, you can’t go wrong. If you, go through either of them again, slowly. You most definitely missed something. . Customizing Your Blog . Once you’re done with the intial setup, you’ll get a generic blog that contains a few placeholders from fastbook. There are a few simple changes you can make to put your personal stamp on your blog. . These changes can be implemented across three files in you new blog repository. I will list the files and the personalizations that can be done in each. . index.html . This file is responsible for the the content of the blog’s homepage – between the top bar and the Posts section. The picture below shows the code and the result in the homepage. . . Two sets of changes can be made in this file: . Line 4: The blog logo by sepecified by a file placed in the images folder of the base directory. This is the image preview automatically shown with your blog URL on social media sites. You can either: replace the fastpages logo with one of your own choosing, leaving Line 4 as it is; or | add you own file to the images folder and edit the filename in Line 4. | . . The image must be in the **images** folder (or subfolders) for your blog to render correctly. | &lt;/div&gt; . Lines 6-14: Everything here can be removed and replaced with content of your choosing. From my experience, the content can be in html format or markdown format or a mix of both formats. | README.md . Theis file is responsible for the content of the blog’s github repository page – after the folders and files have been listed. . . Two sets of changes can be made to this file: . Line 6: You can totally remove that line, thus removing the View Demo Site badge. On the other hand, you might want to change it to one of your choosing and make it point to another link. . This is quite simple. The shields.io developer site contains example code on how to create your own custom badges. . If you want to use a shield logo other than the ones available, you need to convert your png to base64 code. You can’t just specify a path to the .png file. b64.io is a free resource for converting images to base64 format. The logo is then specified in the badge code using the snippet below. . ?logo=data:image/png;base64,… . You can consult the answers provided to this stackoverflow question if you have any difficulty creating you custom badge. You can create any number of badge this way, all with different attributes. . | Lines 7-554: Everything here can be removed and replaced with content of your choosing. The content has to be in markdown format. . | _config.yml . This is the main configuration file for the blog. This file should be edited carefully as any mistakes will cause errors when GutHub tries to build your blog. The main fastpages README.md provides detailed information on what parts of the blog the parameters in this file control. . However, since we’re talking about simple customizations, here are some: . Line 9: This controls the title of the blog found at the top of the homepage. It is freely customizable. | Line 10: This controls the blog description at the very bottom of the homepage. It is freely customizable. | Lines 39-43: Here you can add links you your social media accounts and other professional accounts. This link provides the list if supported social networks and their keys. | Line 52: This controls the display image previews on home page, for posts that have them. It is set to false by default. You should try it out, it’s a good look. | images . This folder contains images necessary for customizing the look of the blog’s URL. There are a couple of changes you can make here. . logo.png: As stated earlier, this specfies the image preview can be automatically shown with your URL on social media sites. This is freely ccustomizable. | favicon.ico: This controls the page icon shown on the browser tab when the site is opened in browser. There are lots of free resources for downloading .ico file or converting your .png to .ico. . . From my experience, the file name must be **favicon.ico**. | . &lt;/div&gt; . pages/about.md . This file is responsible for the the content of the blog’s About Me page – found on right-side of the top bar. The picture below shows the code and the result on the blog. . . Everything from Lines 7-12 can be removed and replaced with content of your choosing. The content has to be in markdown format. . That’s about it for simple ccustomizations’ you can make your blog at first go. . . Further Customizations . Here are some other advanced customizations you can carry out. They are advanced in the sense that you need to go through the documentation of the various resources used by fastpages in order to figure out to to modify them. . At this point, you’ll be diverging greatly from the default fastpages setup for your blog, thus you’ll need to modify/add multiple files to successfully make a modification. . . Further Links . Here are some useful links the I coudn’t add in the main post: . | | | | . . . .",
            "url": "https://outsiders17711.github.io/Mein.Platz/drafts/Draft-Setting-Up-This-Blog/",
            "relUrl": "/drafts/Draft-Setting-Up-This-Blog/",
            "date": " • Jun 14, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![]()../images/ipynb/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . For the default minima theme: . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For the jekyll massively theme: . Here is a footnote reference [^n], and another [^n]. [^n]: Here is the first footnote [^n]: Here is the second footnote . Here is a footnote reference 1, and another 2. . . Here is the first footnote&#8617; . | Here is the second footnote&#8617; . |",
            "url": "https://outsiders17711.github.io/Mein.Platz/test/",
            "relUrl": "/test/",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . Do a thing . do_thing() Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://outsiders17711.github.io/Mein.Platz/drafts/test-markdown-post/",
            "relUrl": "/drafts/test-markdown-post/",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". My name is Oluwaleke Umar Yusuf and I&#39;m a mechanical engineer. I&#39;m a highly resourceful mechanical engineer with over three years of industry experience in construction and telecommunications. I&#39;m from Nigeria, living in Egypt and currently studying Robotics, Control and Smart Systems at the American University In Cairo. You can find me on GitHub or on Twitter. . On this page you can find some information about me and my blog. My blog posts ate mainly geared towards detail my experiences and development with `Machine Learning`, `Computer Vision` and `Gesture Recognition` as I work on my masters. However, there are also posts about topics that I&#39;m most interested in and my opinions or reviews of books I&#39;ve read. . 〰 Life so far... . Breathing since 1995 | Started studying Mechanical Engineering in 2011 | Got Bachelors with honours in 2016 | Started working at CCECC Nigeria in 2017 | Started working at IHS Nigeria in 2018 | Started studying Robotics in 2020 | . 〰 Passionate about... . Books | Coding | CAD Design &amp; Modelling | Music | Flaneuring &amp; Tinkering | . 〰 Thinking about... . Gesture Recognition | SpaceX &amp; Starship | Evolutionary Psychology | . . 🔭 Tools of Trade . 🛠 Programming . 🛠 Machine Learning &amp; Computer Vision . 🛠 Honorable Mentions . . Learning and Reading . These are some books I&#39;ve read. My review and opinion about some of them can be found in blog posts. .",
          "url": "https://outsiders17711.github.io/Mein.Platz/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Blog",
          "content": "",
          "url": "https://outsiders17711.github.io/Mein.Platz/blog/",
          "relUrl": "/blog/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://outsiders17711.github.io/Mein.Platz/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}